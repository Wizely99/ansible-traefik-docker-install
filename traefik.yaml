global:
  checkNewVersion: true
  sendAnonymousUsage: false  # true by default

# (Optional) Enable API and Dashboard
# ---
api:
  dashboard: true  # true by default
  insecure: false  # Don't do this in production!

# Entry Points configuration
# ---
entryPoints:
  web:
    address: :80
    # (Optional) Redirect to HTTPS
    # ---
    http:
      redirections:
        entryPoint:
          to: websecure
          scheme: https

  websecure:
    address: :443
  flower:
    address: ':5555'
# MEMPLAS SPECIFIC SETTING
http:
  routers:
    web-secure-router:
      rule: 'HostRegexp(`{subdomain:[a-z]+}.memplas.com`)'
      
      entryPoints:
        - web-secure
      middlewares:
        - csrf
      service: django
      tls:
        # https://doc.traefik.io/traefik/routing/routers/#certresolver
        certResolver: letsencrypt

    flower-secure-router:
      rule: 'Host(`memplas.com`)'
      entryPoints:
        - flower
      service: flower
      tls:
        # https://doc.traefik.io/traefik/master/routing/routers/#certresolver
        certResolver: letsencrypt

    web-media-router:
      rule: 'HostRegexp(`{subdomain:[a-z]+}.memplas.com`) && PathPrefix(`/media/`)'
      entryPoints:
        - web-secure
      middlewares:
        - csrf
      service: django-media
      tls:
        certResolver: letsencrypt

  middlewares:
    csrf:
      # https://doc.traefik.io/traefik/master/middlewares/http/headers/#hostsproxyheaders
      # https://docs.djangoproject.com/en/dev/ref/csrf/#ajax
      headers:
        hostsProxyHeaders: ['X-CSRFToken']

  services:
    django:
      loadBalancer:
        servers:
          - url: http://django:5000

    flower:
      loadBalancer:
        servers:
          - url: http://flower:5555

    django-media:
      loadBalancer:
        servers:
          - url: http://nginx:80


# Configure your CertificateResolver here...
# ---
certificatesResolvers:
  staging:
    acme:
      email: hermanpaul050597@gmail.com
      storage: /etc/traefik/certs/acme.json
      caServer: "https://acme-staging-v02.api.letsencrypt.org/directory"
      tlsChallenge: {}
      httpChallenge:
        entryPoint: web
      dnsChallenge:
        provider: cloudflare
        delayBeforeCheck: 60
        resolvers:
          - "1.1.1.1:53"
          - "1.0.0.1:53"

  production:
    acme:
      email: hermanpaul050597@gmail.com
      storage: /etc/traefik/certs/acme.json
      caServer: "https://acme-v02.api.letsencrypt.org/directory"
      tlsChallenge: {}
      httpChallenge:
        entryPoint: web
      dnsChallenge:
        provider: cloudflare
        delayBeforeCheck: 60
        resolvers:
          - "1.1.1.1:53"
          - "1.0.0.1:53"



providers:
  # https://doc.traefik.io/traefik/master/providers/docker/#exposedbydefault
  docker:
    exposedByDefault: false  # Default is true
    #  If set to false, containers that do not have a traefik.enable=true 
    # label are ignored from the resulting routing configuration.
  file:
    # watch for dynamic configuration changes
    #https://doc.traefik.io/traefik/master/providers/file/#watch
    directory: /etc/traefik
    watch: true




---
# tasks file for portainer

- name: Configuring portainer docker

  vars:
    image_labels:
      - key: "com.centurylinklabs.watchtower.enable"
        value: "true"
      - key: "traefik.enable"
        value: "true"
      - key: "traefik.http.routers.portainer.rule"
        value: "Host(`{{ DOMAIN_NAME }}`)"
      - key: "traefik.http.routers.portainer.entrypoints"
        value: "websecure"
      - key: "traefik.http.services.portainer.loadbalancer.server.port"
        value: "9000"
      - key: "traefik.http.routers.portainer.tls.certresolver"
        value: "production"

  block:

    # Create Portainer Volume
    # --
    # 
    - name: Create new Volume
      community.docker.docker_volume:
        name: portainer-data
      register: v_output
      ignore_errors: true

    - name: Debug Portainer Volume
      ansible.builtin.debug:
        var: v_output


    # Deploy Portainer
    # --
    #   
    - name: Deploy Portainer
      block:
        - name: deployment
          community.docker.docker_container:
            name: portainer
            image: "docker.io/portainer/portainer-ce"
            expose:
              - 9000
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - portainer-data:/data
            networks:
              - name: "{{ traefik_docker_network_name }}" # required. Name of the network to operate on.
            restart_policy: always
            labels: "{{ image_labels | items2dict }}"
          register: deploy_output

        - name: Debug Portainer deployment
          ansible.builtin.debug:
            var: deploy_output

      when: v_output.failed != true