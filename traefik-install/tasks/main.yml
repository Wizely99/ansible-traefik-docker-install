---

# tasks file for traefik


# Prepare required Files and Directories
#
- name: Preparing required files and Directories in /etc/traefik
  block:

    # Create Directory
    # ---
    #
    - name: Create directory
      file:
        path: /etc/traefik
        state: directory
        

    # Create Directory
    # ---
    #
    - name: Create directory2
      file:
        path: /etc/traefik/certs
        state: directory


    # Copy File
    # ---
    #
    - name: Copy config file
      ansible.builtin.template:
        src: templates/traefik.with-do-dns.yaml.jinja2
        dest: /etc/traefik/traefik.yaml


# Configuroing traefik docker  with "{{ ansible_user }}"
#
- name: Configuring traefik docker
  block:
      
    # Create ssl-certs Volume
    # --
    # 
    - name: Create new Volume
      community.docker.docker_volume:
        name: traefik-ssl-certs

      register: v_output
      ignore_errors: true

    - name: Debug output
      ansible.builtin.debug:
        var: v_output

    # Create the traefik_network
    # --
    #
    - block:
      - name: Create traefik_network
        community.docker.docker_network:
          name: traefik_network
        register: n_output
        ignore_errors: true

      - name: Debug output
        ansible.builtin.debug:
          var: n_output

      when: v_output

    - block:

      # Deploy Traefik
      # --
      #   
      - name: Deploy Traefik
        community.docker.docker_container:
          name: traefik
          image: "traefik:v3.1"
          ports:
            - "80:80"
            - "443:443"
            - "59808:8080"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - traefik-ssl-certs:/ssl-certs
            - /etc/traefik:/etc/traefik
          networks:
            - name: "{{ traefik_docker_network_name }}" # required. Name of the network to operate on.
          restart_policy: always
          env:
            CF_API_KEY_FILE: "{{ CF_API_KEY_FILE | default('NONE') }}"
            CF_API_EMAIL_FILE: "{{ CF_API_EMAIL_FILE | default('NONE') }}"
          labels:
            com.centurylinklabs.watchtower.enable: "false"
        register: d_output
        ignore_errors: true

      - name: Debug output
        ansible.builtin.debug:
          var: d_output

      when: n_output



# ------------------------------------------------------
# tasks file for portainer

- name: Configuring portainer docker

  vars:
    image_labels:
      - key: "com.centurylinklabs.watchtower.enable"
        value: "true"
      - key: "traefik.enable"
        value: "true"
      - key: "traefik.http.routers.portainer.rule"
        value: "Host(`{{ DOMAIN_NAME }}`)"
      - key: "traefik.http.routers.portainer.entrypoints"
        value: "websecure"
      - key: "traefik.http.services.portainer.loadbalancer.server.port"
        value: "9000"
      - key: "traefik.http.routers.portainer.tls.certresolver"
        value: "production"

  block:

    # Create Portainer Volume
    # --
    # 
    - name: Create new Volume
      community.docker.docker_volume:
        name: portainer-data
      register: v_output
      ignore_errors: true

    - name: Debug Portainer Volume
      ansible.builtin.debug:
        var: v_output


    # Deploy Portainer
    # --
    #   
    - name: Deploy Portainer
      block:
        - name: deployment
          community.docker.docker_container:
            name: portainer
            image: "docker.io/portainer/portainer-ce:latest"
            expose:
              - 9000
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - portainer-data:/data
            networks:
              - name: "{{ traefik_docker_network_name }}" # required. Name of the network to operate on.
            restart_policy: always
            labels: "{{ image_labels | items2dict }}"
          register: deploy_output

        - name: Debug Portainer deployment
          ansible.builtin.debug:
            var: deploy_output

      when: v_output.failed != true
        
# Start Watchtower
# -------------------------------------------------------------------------------------
#
- name: Deploy Watchtower
  community.docker.docker_container:
    name: watchtower
    image: "docker.io/containrrr/watchtower:latest"
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
       - /root/.docker/config.json:/config.json
    restart_policy: always
    env:
      TZ: Africa/Dar_es_Salaam
      WATCHTOWER_LIFECYCLE_HOOKS: "1" # Enable pre/post-update scripts
    command: --debug --cleanup --interval 30
  register: output 
  ignore_errors: true

- name: Debug output
  ansible.builtin.debug:
    var: output

